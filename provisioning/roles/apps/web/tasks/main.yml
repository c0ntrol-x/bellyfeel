---
# =====================================================
#
#                        ,d
#                        88
# ,adPPYba,  ,adPPYba, MM88MMM 88       88 8b,dPPYba,
# I8[    "" a8P_____88   88    88       88 88P'    "8a
#  `"Y8ba,  8PP"""""""   88    88       88 88       d8
# aa    ]8I "8b,   ,aa   88,   "8a,   ,a88 88b,   ,a8"
# `"YbbdP"'  `"Ybbd8"'   "Y888  `"YbbdP'Y8 88`YbbdP"'
#                                          88
#                                          88
#
# .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..

# - name: rotate logs
#   shell: logrotate -f /etc/logrotate.conf
#   ignore_errors: true

# - name: remove compressed log backups [DANGER]
#   shell: find /var/log -name '*.gz' -exec rm -fv {} \;
#   ignore_errors: true

# ===================================
#
# ,adPPYYba, 8b,dPPYba,  8b,dPPYba,
# ""     `Y8 88P'    "8a 88P'    "8a
# ,adPPPPP88 88       d8 88       d8
# 88,    ,88 88b,   ,a8" 88b,   ,a8"
# `"8bbdP"Y8 88`YbbdP"'  88`YbbdP"'
#            88          88
#            88          88
#
# .. .. .. .. .. .. .. .. .. .. .. ..

- name: "installing dependencies"
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
    cache_valid_time: 3600
    autoremove: yes

  with_items:
    - bash-completion
    - build-essential
    - ca-certificates
    - curl
    - docker.io
    - emacs24-nox
    - git
    - git-svn
    - gnupg
    - gnupg2
    - htop
    - libev-dev
    - libffi-dev
    - libmp3lame-dev
    - libmysqlclient-dev
    - libnacl-dev
    - libssl-dev
    - libudev-dev
    - libxml2-dev
    - libxslt1-dev
    - libzmq-dev
    - mysql-client
    - mysql-server
    - nginx
    - ntp
    - pkg-config
    - python
    - python-dev
    - python-mysqldb
    - python-pip
    - python-virtualenv
    - redis-server
    - redis-tools
    - rng-tools
    - rsync
    - subversion
    - telnet
    - tree
    - vim
    - virtualenvwrapper
    - wget
    - libxml2-dev
    - libxslt1-dev

- name: ensure bellyfeel-related folders
  file:
    state: "directory"
    path: "{{ item }}"
    owner: root
    group: root

  with_items:
    - "{{ bellyfeel_backups_dir }}"
    - "{{ bellyfeel_private_dir }}"
    - "{{ bellyfeel_git_dir }}"
    - "{{ bellyfeel_log_dir }}"
    - "{{ bellyfeel_src_dir }}"
    - "{{ bellyfeel_static_dir }}"
    - "{{ bellyfeel_tools_dir }}"
    - "{{ bellyfeel_venv_dir }}"
    - "{{ bellyfeel_www_root }}"

- name: ensure log dirs
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    owner: root
    group: root
  notify: nginx permissions to bellyfeel assets
  with_items:
    - "{{ bellyfeel_log_dir }}/gunicorn"
    - "{{ bellyfeel_log_dir }}/nginx"
    - "{{ bellyfeel_log_dir }}/workers"

- name: create base nginx folders
  file:
    path: "{{ item }}"
    state: "directory"
    owner: www-data
    group: www-data
    mode: 0755

  notify:
    - restart nginx
  with_items:
    - "{{ bellyfeel_www_root }}"
    - "{{ bellyfeel_www_static_dir }}"

- name: rsync static files to the safe remote folder
  synchronize:
    src: "{{ local_repository_root_path }}/{{ bellyfeel_python_module_name }}/{{ bellyfeel_relative_static_subpath }}"
    dest: "{{ bellyfeel_www_static_dir }}"
    recursive: yes
    perms: yes
    compress: yes

  notify:
    - restart nginx



- name: rsync local codebase contents to the server
  synchronize:
    src: "{{ local_repository_root_path }}"
    dest: "{{ bellyfeel_src_dir }}"
    recursive: yes
    perms: yes
    compress: yes

  notify:
    - restart bellyfeel-app

- name: install latest setuptools
  pip:
    name: setuptools
    state: latest
    virtualenv: "{{ bellyfeel_venv_dir }}"

- name: install latest pip
  pip:
    state: latest
    name: pip
    virtualenv: "{{ bellyfeel_venv_dir }}"

- name: install requirements
  pip:
    requirements: "{{ bellyfeel_src_dir }}/requirements.txt"
    virtualenv: "{{ bellyfeel_venv_dir }}"

- name: ensure bellyfeel is not installed
  pip:
    state: "absent"
    name: "bellyfeel"
    virtualenv: "{{ bellyfeel_venv_dir }}"

- name: install python application module
  pip:
    name: "file://{{ bellyfeel_src_dir }} "
    virtualenv: "{{ bellyfeel_venv_dir }}"
    state: present

- name: install bellyfeel-app upstart script
  file:
    path: "/etc/init/python-app.conf"
    state: absent

- name: install bellyfeel-app upstart script
  template:
    src: "gunicorn.upstart"
    dest: "/etc/init/bellyfeel-app.conf"
    owner: root
    group: root
    mode: 644

  notify: restart bellyfeel-app

- name: install bellyfeel-app upstart logrotate
  template:
    src: "logrotate.gunicorn.j2"
    dest: "/etc/logrotate.d/bellyfeel-app"
    owner: root
    group: root
    mode: 644

- name: test bellyfeel-app upstart script
  shell: init-checkconf /etc/init/bellyfeel-app.conf && initctl check-config bellyfeel-app
  notify: restart bellyfeel-app



# ====================================================================

# 88b           d88              ad88888ba    ,ad8888ba,   88
# 888b         d888             d8"     "8b  d8"'    `"8b  88
# 88`8b       d8'88             Y8,         d8'        `8b 88
# 88 `8b     d8' 88 8b       d8 `Y8aaaaa,   88          88 88
# 88  `8b   d8'  88 `8b     d8'   `"""""8b, 88          88 88
# 88   `8b d8'   88  `8b   d8'          `8b Y8,    "88,,8P 88
# 88    `888'    88   `8b,d8'   Y8a     a8P  Y8a.    Y88P  88
# 88     `8'     88     Y88'     "Y88888P"    `"Y8888Y"Y8a 88888888888
#                       d8'
#                      d8'
#
# .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..

- name: "set password for mysql root"
  mysql_user:
    user: root
    password: "{{ bellyfeel_mysql_root_password }}"
    state: present
  ignore_errors: yes

- name: "create mysql user"
  mysql_user:
    login_user: root
    login_password: "{{ bellyfeel_mysql_root_password }}"
    name: "{{ bellyfeel_mysql_user }}"
    password: "{{ bellyfeel_mysql_password }}"
    update_password: always
    state: present
  when: bellyfeel_mysql_force_drop_db

- name: "set password for mysql user"
  mysql_user:
    login_user: root
    login_password: "{{ bellyfeel_mysql_root_password }}"
    name: "{{ bellyfeel_mysql_user }}"
    password: "{{ bellyfeel_mysql_password }}"
    host: localhost
    state: present
    host_all: yes
    update_password: always
    priv: '*.*:ALL,GRANT'


- name: drop mysql database
  mysql_db:
    name: "{{ bellyfeel_mysql_db }}"
    login_user: root
    login_password: "{{ bellyfeel_mysql_root_password }}"
    state: absent
  when: bellyfeel_mysql_force_drop_db

- name: setup mysql database
  mysql_db:
    name: "{{ bellyfeel_mysql_db }}"
    login_user: root
    login_password: "{{ bellyfeel_mysql_root_password }}"
    state: present
    encoding: "utf8"

- name: place alembic config
  template:
    src: alembic.ini.j2
    dest: "{{ bellyfeel_src_dir }}/bellyfeel/migrations/alembic.ini"
    owner: root
    group: root
    mode: 0644

- name: running alembic migrations
  shell: "{{ bellyfeel_venv_dir }}/bin/alembic -c bellyfeel/migrations/alembic.ini upgrade head"
  args:
    chdir: "{{ bellyfeel_src_dir }}"


# =====================================================
#
#                         88
#                         ""
#
# 8b,dPPYba,   ,adPPYb,d8 88 8b,dPPYba,  8b,     ,d8
# 88P'   `"8a a8"    `Y88 88 88P'   `"8a  `Y8, ,8P'
# 88       88 8b       88 88 88       88    )888(
# 88       88 "8a,   ,d88 88 88       88  ,d8" "8b,
# 88       88  `"YbbdP"Y8 88 88       88 8P'     `Y8
#              aa,    ,88
#               "Y8bbdP"
#
# .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..

- name: install nginx main file
  template:
    src: nginx.conf
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: 644
  notify: restart nginx

- name: ensuring default nginx site is not there
  file:
    state: "absent"
    path: "/etc/nginx/sites-enabled/default"



- name: install nginx site config file
  template:
    src: app.conf
    dest: /etc/nginx/sites-available/bellyfeel.conf
    owner: root
    group: root
    mode: 644
  notify: restart nginx

- name: enable nginx site config file
  file:
    state: "link"
    src: "/etc/nginx/sites-available/bellyfeel.conf"
    dest: "/etc/nginx/sites-enabled/bellyfeel.conf"
    owner: "www-data"
    group: "www-data"
  notify: restart nginx


#             88
#             ""   ,d
#                  88
#  ,adPPYb,d8 88 MM88MMM ,adPPYba, ,adPPYYba,
# a8"    `Y88 88   88   a8P_____88 ""     `Y8
# 8b       88 88   88   8PP""""""" ,adPPPPP88
# "8a,   ,d88 88   88,  "8b,   ,aa 88,    ,88
#  `"YbbdP"Y8 88   "Y888 `"Ybbd8"' `"8bbdP"Y8
#  aa,    ,88
#   "Y8bbdP"


# - name: install docker-py globally
#   pip:
#     name: docker-py
#     state: latest

# - name: ensure gitea is running
#   docker:
#     name: gitea
#     hostname: git.bellyfeel.io
#     image: gitea/gitea
#     state: reloaded
#     pull: always
#     volumes:
#       /srv/gitea:/data
#     ports:
#       - 10022:22
#       - 10080:3000


# ========================================================
#
# ,adPPYba, 8b       d8 ,adPPYba,
# I8[    "" `8b     d8' I8[    ""
#  `"Y8ba,   `8b   d8'   `"Y8ba,
# aa    ]8I   `8b,d8'   aa    ]8I
# `"YbbdP"'     Y88'    `"YbbdP"'
#               d8'
#              d8'
#
#                     88                    88
#                     88                    ""
#                     88
# ,adPPYYba,  ,adPPYb,88 88,dPYba,,adPYba,  88 8b,dPPYba,
# ""     `Y8 a8"    `Y88 88P'   "88"    "8a 88 88P'   `"8a
# ,adPPPPP88 8b       88 88      88      88 88 88       88
# 88,    ,88 "8a,   ,d88 88      88      88 88 88       88
# `"8bbdP"Y8  `"8bbdP"Y8 88      88      88 88 88       88
#
#
#                                88
#   ,d                           88
#   88                           88
# MM88MMM ,adPPYba,   ,adPPYba,  88 ,adPPYba,
#   88   a8"     "8a a8"     "8a 88 I8[    ""
#   88   8b       d8 8b       d8 88  `"Y8ba,
#   88,  "8a,   ,a8" "8a,   ,a8" 88 aa    ]8I
#   "Y888 `"YbbdP"'   `"YbbdP"'  88 `"YbbdP"'
# .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..


- name: "[sysadmin tools] bellyfeel environment bash lib"
  template:
    src: "env.sh.j2"
    dest: "{{ bellyfeel_tools_dir }}/env.sh"
    owner: root
    group: root
    mode: 644


# ====================================================================
#
#  88                                88
#  88                                88
#  88                                88
#  88,dPPYba,  ,adPPYYba,  ,adPPYba, 88   ,d8 88       88 8b,dPPYba,
#  88P'    "8a ""     `Y8 a8"     "" 88 ,a8"  88       88 88P'    "8a
#  88       d8 ,adPPPPP88 8b         8888[    88       88 88       d8
#  88b,   ,a8" 88,    ,88 "8a,   ,aa 88`"Yba, "8a,   ,a88 88b,   ,a8"
#  8Y"Ybbd8"'  `"8bbdP"Y8  `"Ybbd8"' 88   `Y8a `"YbbdP'Y8 88`YbbdP"'
#                                                         88
#                                                         88
# .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..

- name: "mysql backup key"
  copy:
    mode: 0600  # PRIVATE FILE SHOULD BE SEEN BY ITS OWNER ONLY!!!
    dest: "{{ bellyfeel_mysql_backup_private_key_path }}"
    content: "{{ bellyfeel_mysql_backup_private_key }}"
    owner: root
    group: root

- name: "mysql backup script"
  template:
    mode: 0700  # PRIVATE FILE SHOULD BE SEEN BY ITS OWNER ONLY!!!
    src: "mysql-aes-cbc-bzip2-backup.sh.j2"
    dest: "{{ bellyfeel_tools_dir }}/mysql-aes-cbc-bzip2-backup.sh"
    owner: root
    group: root

- name: "mysql backup recovery script"
  template:
    mode: 0700  # PRIVATE FILE SHOULD BE SEEN BY ITS OWNER ONLY!!!
    src: "mysql-aes-cbc-bzip2-recover.sh.j2"
    dest: "{{ bellyfeel_tools_dir }}/mysql-aes-cbc-bzip2-recover.sh"
    owner: root
    group: root


- name: "backup mysql"
  shell: "{{ bellyfeel_tools_dir }}/mysql-aes-cbc-bzip2-backup.sh"
